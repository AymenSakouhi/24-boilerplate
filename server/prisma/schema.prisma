// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  name             String //if you put ? means it is optional
  role             Role            @default(BASIC)
  age              Int
  email            String?         @unique
  writenPosts      Post[]          @relation("WrittenPosts")
  favoritePosts    Post[]          @relation("FavoritePosts")
  writtenCatalog   Catalog[]       @relation("uploadedImages")
  UserPreference   UserPreference? @relation(fields: [UserPreferenceId], references: [id])
  UserPreferenceId String?         @unique
  // @@id([name, email])
  // isAdmin     Boolean
  // largeNumber BigInt
  // blob  Bytes
  // blob Unsupported("") // if you want to have a new datatype

  @@unique([age, name])
  @@index([email])
}

model Image {
  id         String   @id @default(uuid())
  name       String
  blob       Bytes
  Catalog    Catalog  @relation("uploadedTo", fields: [catalogId], references: [id])
  catalogId  String
  uploadedAt DateTime @default(now())
  EditedAt   DateTime
}

model Catalog {
  id        String  @id @default(uuid())
  name      String?
  createdBy User?   @relation("uploadedImages", fields: [creatorId], references: [id])
  creatorId String?
  images    Image[] @relation("uploadedTo")
}

model UserPreference {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User?
}

model Post {
  id            String     @id @default(uuid())
  title         String
  averageRating Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  author        User       @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId      String
  fovoriteBy    User?      @relation("FavoritePosts", fields: [fovoriteById], references: [id])
  fovoriteById  String?
  Categories    Category[]
}

model Category {
  id    String @id @default(uuid())
  name  String
  posts Post[]
}

enum Role {
  BASIC
  ADMIN
}
